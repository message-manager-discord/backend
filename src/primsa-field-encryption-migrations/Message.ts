// This file was generated by prisma-field-encryption.

import type { PrismaClient, Message } from '@prisma/client'
import {
  ProgressReportCallback,
  defaultProgressReport,
  visitRecords
} from 'prisma-field-encryption/dist/generator/runtime'

type Cursor = Message['internalId']

export async function migrate(
  client: PrismaClient,
  reportProgress: ProgressReportCallback = defaultProgressReport
): Promise<number> {
  return visitRecords<PrismaClient, Cursor>({
    modelName: 'Message',
    client,
    getTotalCount: client.message.count,
    migrateRecord,
    reportProgress,
  })
}

async function migrateRecord(client: PrismaClient, cursor: Cursor | undefined) {
  return await client.$transaction(async tx => {
    const record = await tx.message.findFirst({
      take: 1,
      skip: cursor === undefined ? undefined : 1,
      ...(cursor === undefined
        ? {}
        : {
            cursor: {
              internalId: cursor
            }
          }),
      orderBy: {
        internalId: 'asc'
      },
      select: {
        internalId: true,
        content: true
      }
    })
    if (!record) {
      return cursor
    }
    await tx.message.update({
      where: {
        internalId: record.internalId
      },
      data: {
        content: record.content
      }
    })
    return record.internalId
  })
}

/**
 * Internal model:
 * {
 *   "cursor": "internalId",
 *   "fields": {
 *     "content": {
 *       "encrypt": true,
 *       "strictDecryption": false
 *     }
 *   },
 *   "connections": {
 *     "guild": {
 *       "modelName": "Guild",
 *       "isList": false
 *     },
 *     "channel": {
 *       "modelName": "Channel",
 *       "isList": false
 *     },
 *     "embed": {
 *       "modelName": "MessageEmbed",
 *       "isList": false
 *     },
 *     "reports": {
 *       "modelName": "Report",
 *       "isList": true
 *     }
 *   }
 * }
 */
