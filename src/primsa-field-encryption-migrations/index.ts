// This file was generated by prisma-field-encryption.

import type { PrismaClient } from '@prisma/client'
import { migrate as migrateMessage } from './Message'
import { migrate as migrateMessageEmbed } from './MessageEmbed'
import { migrate as migrateEmbedField } from './EmbedField'

export interface ProgressReport {
  model: string
  processed: number
  totalCount: number
  performance: number
}

export type ProgressReportCallback = (
  progress: ProgressReport
) => void | Promise<void>

export const defaultProgressReport: ProgressReportCallback = ({
  model,
  totalCount,
  processed,
  performance
}) => {
  const length = totalCount.toString().length
  const pct = Math.round((100 * processed) / totalCount)
    .toString()
    .padStart(3)
  console.info(
    `${model.padEnd(12)} ${pct}% processed ${processed
      .toString()
      .padStart(length)} / ${totalCount} (took ${performance.toFixed(2)}ms)`
  )
}

// --

export type MigrationReport = {
  Message: number,
  MessageEmbed: number,
  EmbedField: number
}

/**
 * Migrate models concurrently.
 *
 * Processed models:
 * - Message
 * - MessageEmbed
 * - EmbedField
 *
 * @returns a dictionary of the number of processed records per model.
 */
export async function migrate(
  client: PrismaClient,
  reportProgress: ProgressReportCallback = defaultProgressReport
): Promise<MigrationReport> {
  const [
    processedMessage,
    processedMessageEmbed,
    processedEmbedField
  ] = await Promise.all([
    migrateMessage(client, reportProgress),
    migrateMessageEmbed(client, reportProgress),
    migrateEmbedField(client, reportProgress)
  ])
  return {
    Message: processedMessage,
    MessageEmbed: processedMessageEmbed,
    EmbedField: processedEmbedField
  }
}
